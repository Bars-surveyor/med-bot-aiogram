# med_bot_aiogram.py (–§—ñ–Ω–∞–ª—å–Ω–∞ –≤–µ—Ä—Å—ñ—è)

import asyncio
import logging
import sqlite3
import datetime
import re
import time
import os
import matplotlib.pyplot as plt
from fpdf import FPDF

from openai import AsyncOpenAI

from aiogram import Bot, F, types, Router
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery

import schedule

# --- –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ø ---
DATABASE_NAME = 'health_log.db'
PRIVACY_POLICY_URL = "https://telegra.ph/Pol%D1%96tika-konf%D1%96denc%D1%96jnost%D1%96-dlya-medichnogo-pom%D1%96chnika-med-pomichnyk-bot-07-22-2" # –ü—Ä–∏–∫–ª–∞–¥, –∑–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ —Å–≤–æ—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è
ANALYZE_BTN_TEXT = "ü§î –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Å–∏–º–ø—Ç–æ–º–∏ (AI)"

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ä–æ—É—Ç–µ—Ä–∞
router = Router()

# --- –°–¢–ê–ù–ò FSM ---
class Form(StatesGroup):
    symptoms_analysis = State()
    answering_clarification = State()
    symptom_checker_start = State()
    symptom_checker_headache_type = State()
    symptom_checker_headache_location = State()
    symptom_checker_headache_additional = State()
    edit_age = State()
    edit_gender = State()
    edit_weight_kg = State()
    edit_height_cm = State()
    edit_blood_group = State()
    edit_allergies = State()
    edit_chronic_diseases = State()
    edit_emergency_contact = State()
    add_med_name = State()
    add_med_dosage = State()
    add_med_schedule = State()
    checkin_mood = State()
    checkin_sleep = State()
    # –ù–æ–≤—ñ —Å—Ç–∞–Ω–∏ –¥–ª—è Check-in
    checkin_activity = State()
    checkin_stress = State()
    checkin_water = State()
    waiting_for_note = State()

# --- –ë–ê–ó–ê –î–ê–ù–ò–• ---
def setup_database():
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–∏—Ö —Ç–∞–±–ª–∏—Ü—å
    cursor.execute("CREATE TABLE IF NOT EXISTS users (user_id INTEGER PRIMARY KEY, first_name TEXT, age INTEGER, gender TEXT, weight_kg REAL, height_cm REAL)")
    cursor.execute("CREATE TABLE IF NOT EXISTS health_entries (entry_id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER, timestamp DATETIME DEFAULT CURRENT_TIMESTAMP, mood TEXT, sleep_quality TEXT, systolic_pressure INTEGER, diastolic_pressure INTEGER, FOREIGN KEY (user_id) REFERENCES users(user_id))")
    cursor.execute("CREATE TABLE IF NOT EXISTS medications (med_id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER, med_name TEXT NOT NULL, dosage TEXT, schedule TEXT, is_active BOOLEAN DEFAULT 1, FOREIGN KEY (user_id) REFERENCES users(user_id))")
    cursor.execute("CREATE TABLE IF NOT EXISTS medication_log (log_id INTEGER PRIMARY KEY AUTOINCREMENT, med_id INTEGER, user_id INTEGER, timestamp DATETIME, status TEXT, FOREIGN KEY (med_id) REFERENCES medications(med_id))")
    cursor.execute("CREATE TABLE IF NOT EXISTS openai_interactions (id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER, timestamp DATETIME DEFAULT CURRENT_TIMESTAMP, prompt TEXT, response TEXT)")
    cursor.execute("CREATE TABLE IF NOT EXISTS cycles (cycle_id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER, start_date DATE, end_date DATE, FOREIGN KEY (user_id) REFERENCES users(user_id))")

    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö –ø–æ–ª—ñ–≤ —á–µ—Ä–µ–∑ ALTER TABLE, —ñ–≥–Ω–æ—Ä—É—é—á–∏ –ø–æ–º–∏–ª–∫–∏, —è–∫—â–æ –≤–æ–Ω–∏ –≤–∂–µ —ñ—Å–Ω—É—é—Ç—å
    try: cursor.execute("ALTER TABLE users ADD COLUMN checkin_streak INTEGER DEFAULT 0")
    except: pass
    try: cursor.execute("ALTER TABLE users ADD COLUMN last_checkin_date DATE")
    except: pass
    try: cursor.execute("ALTER TABLE health_entries ADD COLUMN note TEXT")
    except: pass
    try: cursor.execute("ALTER TABLE users ADD COLUMN blood_group TEXT")
    except: pass
    try: cursor.execute("ALTER TABLE users ADD COLUMN allergies TEXT")
    except: pass
    try: cursor.execute("ALTER TABLE users ADD COLUMN chronic_diseases TEXT")
    except: pass
    try: cursor.execute("ALTER TABLE users ADD COLUMN emergency_contact TEXT")
    except: pass
    # –ù–æ–≤—ñ –ø–æ–ª—è –¥–ª—è Check-in
    try: cursor.execute("ALTER TABLE health_entries ADD COLUMN activity_level TEXT")
    except: pass
    try: cursor.execute("ALTER TABLE health_entries ADD COLUMN stress_level TEXT")
    except: pass
    try: cursor.execute("ALTER TABLE health_entries ADD COLUMN water_intake TEXT")
    except: pass

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å –¥–ª—è –≥–µ–π–º—ñ—Ñ—ñ–∫–∞—Ü—ñ—ó
    cursor.execute("CREATE TABLE IF NOT EXISTS achievements (code TEXT PRIMARY KEY, name TEXT, description TEXT, icon TEXT)")
    cursor.execute("CREATE TABLE IF NOT EXISTS user_achievements (user_id INTEGER, achievement_code TEXT, timestamp DATETIME DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (user_id, achievement_code), FOREIGN KEY (user_id) REFERENCES users(user_id), FOREIGN KEY (achievement_code) REFERENCES achievements(code))")
    achievements_data = [('FIRST_REPORT', '–ü–µ—Ä—à–∏–π –∑–≤—ñ—Ç', '–í–∏ –∑–≥–µ–Ω–µ—Ä—É–≤–∞–ª–∏ —Å–≤—ñ–π –ø–µ—Ä—à–∏–π –∑–≤—ñ—Ç –¥–ª—è –ª—ñ–∫–∞—Ä—è.', 'üìÑ'), ('STREAK_5_DAYS', '–°—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å', '–í–∏ –≤–µ–¥–µ—Ç–µ —â–æ–¥–µ–Ω–Ω–∏–∫ 5 –¥–Ω—ñ–≤ –ø–æ—Å–ø—ñ–ª—å.', 'üî•'), ('FIRST_NOTE', '–ù–æ—Ç–∞—Ç–∫–∏', '–í–∏ –∑—Ä–æ–±–∏–ª–∏ —Å–≤—ñ–π –ø–µ—Ä—à–∏–π —à–≤–∏–¥–∫–∏–π –∑–∞–ø–∏—Å.', '‚úçÔ∏è')]
    cursor.executemany("INSERT OR IGNORE INTO achievements (code, name, description, icon) VALUES (?, ?, ?, ?)", achievements_data)

    conn.commit()
    conn.close()
    logging.info("–ë–∞–∑—É –¥–∞–Ω–∏—Ö –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ —Ç–∞ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ.")

# --- –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –ë–î ---
def create_or_update_user(user_id: int, first_name: str):
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute("INSERT OR IGNORE INTO users (user_id, first_name) VALUES (?, ?)", (user_id, first_name))
    cursor.execute("UPDATE users SET first_name = ? WHERE user_id = ?", (first_name, user_id))
    conn.commit()
    conn.close()

def get_user_profile(user_id: int):
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.execute("SELECT first_name, age, gender, weight_kg, height_cm, blood_group, allergies, chronic_diseases, emergency_contact FROM users WHERE user_id = ?", (user_id,))
    profile = cursor.fetchone()
    conn.close()
    return profile

def update_user_field(user_id: int, field: str, value):
    allowed_fields = ["age", "gender", "weight_kg", "height_cm", "blood_group", "allergies", "chronic_diseases", "emergency_contact"]
    if field not in allowed_fields: return
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute(f"UPDATE users SET {field} = ? WHERE user_id = ?", (value, user_id))
    conn.commit()
    conn.close()

def save_health_entry(user_id, **kwargs):
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    valid_keys = ['mood', 'sleep_quality', 'note', 'activity_level', 'stress_level', 'water_intake']
    filtered_kwargs = {k: v for k, v in kwargs.items() if k in valid_keys}
    if not filtered_kwargs: return
    columns = ', '.join(filtered_kwargs.keys())
    placeholders = ', '.join('?' * len(filtered_kwargs))
    sql = f"INSERT INTO health_entries (user_id, {columns}) VALUES (?, {placeholders})"
    values = (user_id,) + tuple(filtered_kwargs.values())
    cursor.execute(sql, values)
    conn.commit()
    conn.close()

def get_user_history(user_id: int):
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT timestamp, mood, sleep_quality, note, activity_level, stress_level, water_intake FROM health_entries WHERE user_id = ? ORDER BY timestamp DESC LIMIT 15", (user_id,))
    history = cursor.fetchall()
    conn.close()
    return history

def check_achievement(user_id: int, achievement_code: str) -> bool:
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT 1 FROM user_achievements WHERE user_id = ? AND achievement_code = ?", (user_id, achievement_code))
    exists = cursor.fetchone()
    conn.close()
    return exists is not None

async def award_achievement(user_id: int, achievement_code: str, message: Message):
    if not check_achievement(user_id, achievement_code):
        conn = sqlite3.connect(DATABASE_NAME)
        cursor = conn.cursor()
        cursor.execute("INSERT INTO user_achievements (user_id, achievement_code) VALUES (?, ?)", (user_id, achievement_code))
        cursor.execute("SELECT name, icon FROM achievements WHERE code = ?", (achievement_code,))
        ach = cursor.fetchone()
        conn.commit()
        conn.close()
        if ach:
            await message.answer(f"{ach[1]} –î–æ—Å—è–≥–Ω–µ–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–æ: **{ach[0]}**!")
# ... (—Ä–µ—à—Ç–∞ —Ñ—É–Ω–∫—Ü—ñ–π –ë–î: add_medication, get_user_medications —ñ —Ç.–¥. –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω) ...
def get_user_medications(user_id: int):
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT med_id, med_name, dosage, schedule FROM medications WHERE user_id = ? AND is_active = 1", (user_id,))
    meds = cursor.fetchall()
    conn.close()
    return meds

def log_medication_status(user_id: int, med_id: int, status: str):
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute("INSERT INTO medication_log (user_id, med_id, timestamp, status) VALUES (?, ?, ?, ?)", (user_id, med_id, datetime.datetime.now(), status))
    conn.commit()
    conn.close()

def set_medication_inactive(med_id: int, user_id: int):
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute("UPDATE medications SET is_active = 0 WHERE med_id = ? AND user_id = ?", (med_id, user_id))
    conn.commit()
    conn.close()

def save_openai_interaction(user_id, prompt, response):
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute("INSERT INTO openai_interactions (user_id, prompt, response) VALUES (?, ?, ?)", (user_id, prompt, response))
    conn.commit()
    conn.close()

def start_new_cycle(user_id: int):
    today = datetime.date.today()
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute("UPDATE cycles SET end_date = ? WHERE user_id = ? AND end_date IS NULL", (today - datetime.timedelta(days=1), user_id))
    cursor.execute("INSERT INTO cycles (user_id, start_date) VALUES (?, ?)", (user_id, today))
    conn.commit()
    conn.close()

def end_current_cycle(user_id: int):
    today = datetime.date.today()
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute("UPDATE cycles SET end_date = ? WHERE user_id = ? AND end_date IS NULL", (today, user_id))
    updated_rows = cursor.rowcount
    conn.commit()
    conn.close()
    return updated_rows > 0

def get_cycle_predictions(user_id: int):
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT start_date, end_date FROM cycles WHERE user_id = ? AND end_date IS NOT NULL ORDER BY start_date DESC LIMIT 5", (user_id,))
    cycles = cursor.fetchall()
    conn.close()
    if len(cycles) < 2: return None, None
    lengths = [(datetime.datetime.strptime(cycles[i][0], '%Y-%m-%d').date() - datetime.datetime.strptime(cycles[i+1][0], '%Y-%m-%d').date()).days for i in range(len(cycles) - 1)]
    avg_length = int(sum(lengths) / len(lengths))
    last_start_date = datetime.datetime.strptime(cycles[0][0], '%Y-%m-%d').date()
    predicted_date = last_start_date + datetime.timedelta(days=avg_length)
    return avg_length, predicted_date.strftime("%d-%m-%Y")


# --- –†—É—à—ñ–π –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π ---
def generate_daily_recommendation(data: dict) -> str:
    recommendations = []
    if data.get("stress_level") == "–í–∏—Å–æ–∫–∏–π":
        recommendations.append("–í–∏—Å–æ–∫–∏–π —Ä—ñ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—É. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–∞–π—Ç–∏ 10-15 —Ö–≤–∏–ª–∏–Ω –¥–ª—è –∫–æ—Ä–æ—Ç–∫–æ—ó –ø—Ä–æ–≥—É–ª—è–Ω–∫–∏ –∞–±–æ –¥–∏—Ö–∞–ª—å–Ω–∏—Ö –≤–ø—Ä–∞–≤, —â–æ–± —Ä–æ–∑—Å–ª–∞–±–∏—Ç–∏—Å—è.")
    if data.get("activity_level") == "–ù–∏–∑—å–∫–∞":
        recommendations.append("–ù–∏–∑—å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —Å—å–æ–≥–æ–¥–Ω—ñ. –ù–∞–≤—ñ—Ç—å –∫–æ—Ä–æ—Ç–∫–∞ 20-—Ö–≤–∏–ª–∏–Ω–Ω–∞ –ø—Ä–æ–≥—É–ª—è–Ω–∫–∞ –º–æ–∂–µ –∑–Ω–∞—á–Ω–æ –ø–æ–∫—Ä–∞—â–∏—Ç–∏ –≤–∞—à–µ —Å–∞–º–æ–ø–æ—á—É—Ç—Ç—è.")
    if data.get("mood") == "üòû –ü–æ–≥–∞–Ω–∏–π" and data.get("activity_level") == "–ù–∏–∑—å–∫–∞":
        recommendations.append("–Ü–Ω–æ–¥—ñ —Ñ—ñ–∑–∏—á–Ω–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –¥–æ–ø–æ–º–∞–≥–∞—î –ø–æ–∫—Ä–∞—â–∏—Ç–∏ –Ω–∞—Å—Ç—Ä—ñ–π. –ú–æ–∂–ª–∏–≤–æ, –Ω–µ–≤–µ–ª–∏–∫–∞ –ø—Ä–æ–≥—É–ª—è–Ω–∫–∞ –±—É–¥–µ –∫–æ—Ä–∏—Å–Ω–æ—é.")
    if "–ø–æ–≥–∞–Ω–æ" in data.get("sleep_quality", "").lower() or "–º–∞–ª–æ" in data.get("sleep_quality", "").lower():
        recommendations.append("–ü–æ–≥–∞–Ω–∏–π —Å–æ–Ω –≤–ø–ª–∏–≤–∞—î –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤—ñ—Ç—Ä–∏—Ç–∏ –∫—ñ–º–Ω–∞—Ç—É –ø–µ—Ä–µ–¥ —Å–Ω–æ–º —ñ –≤—ñ–¥–∫–ª–∞—Å—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –∑–∞ –≥–æ–¥–∏–Ω—É –¥–æ –∑–∞—Å–∏–Ω–∞–Ω–Ω—è.")
    if data.get("water_intake") == "–ú–µ–Ω—à–µ 1 –ª—ñ—Ç—Ä–∞":
        recommendations.append("–ù–µ –∑–∞–±—É–≤–∞–π—Ç–µ –ø–∏—Ç–∏ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –≤–æ–¥–∏ –ø—Ä–æ—Ç—è–≥–æ–º –¥–Ω—è. –¶–µ –≤–∞–∂–ª–∏–≤–æ –¥–ª—è –µ–Ω–µ—Ä–≥—ñ—ó —Ç–∞ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü—ñ—ó.")
    if not recommendations:
        return "‚ú® –ß—É–¥–æ–≤—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ —Å—å–æ–≥–æ–¥–Ω—ñ! –¢–∞–∫ —Ç—Ä–∏–º–∞—Ç–∏!"
    else:
        return "üí° **–û—Å—å –¥–µ–∫—ñ–ª—å–∫–∞ –ø–æ—Ä–∞–¥ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤–∞—à–∏—Ö —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ—Ö –∑–∞–ø–∏—Å—ñ–≤:**\n\n- " + "\n- ".join(recommendations)

# --- –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞, –∑–≤—ñ—Ç–∏, –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ ---
# ... (–∫–æ–¥ –¥–ª—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏, –∑–≤—ñ—Ç—ñ–≤, –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞ –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω) ...
def get_weekly_health_data(user_id: int):
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT timestamp, mood, systolic_pressure, diastolic_pressure FROM health_entries WHERE user_id = ? AND timestamp >= date('now', '-14 days') ORDER BY timestamp ASC", (user_id,))
    data = cursor.fetchall()
    conn.close()
    return data

def analyze_weekly_data(data: list):
    if not data: return None
    mood_scores = {"üòä –ß—É–¥–æ–≤–∏–π": 3, "üòê –ù–æ—Ä–º–∞–ª—å–Ω–∏–π": 2, "üòû –ü–æ–≥–∞–Ω–∏–π": 1}
    today = datetime.datetime.now()
    last_week_data = [row for row in data if (today - datetime.datetime.strptime(row[0], '%Y-%m-%d %H:%M:%S.%f')).days < 7]
    prev_week_data = [row for row in data if 7 <= (today - datetime.datetime.strptime(row[0], '%Y-%m-%d %H:%M:%S.%f')).days < 14]
    if not last_week_data: return "–ù–∞ –º–∏–Ω—É–ª–æ–º—É —Ç–∏–∂–Ω—ñ –Ω–µ –±—É–ª–æ –∑–∞–ø–∏—Å—ñ–≤. –ù–∞–º–∞–≥–∞–π—Ç–µ—Å—è —Ä–æ–±–∏—Ç–∏ Check-in —â–æ–¥–Ω—è, —â–æ–± –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –∞–Ω–∞–ª—ñ—Ç–∏–∫—É."
    
    def get_avg_metrics(week_data):
        moods = [mood_scores.get(r[1], 0) for r in week_data if r[1]]
        pressures = [(r[2], r[3]) for r in week_data if r[2] and r[3]]
        return (sum(moods) / len(moods) if moods else 0, sum(p[0] for p in pressures) / len(pressures) if pressures else 0, sum(p[1] for p in pressures) / len(pressures) if pressures else 0)

    avg_mood_last, avg_sys_last, avg_dias_last = get_avg_metrics(last_week_data)
    report_lines = ["**üìä –í–∞—à –∑–≤—ñ—Ç –∑–∞ –º–∏–Ω—É–ª–∏–π —Ç–∏–∂–¥–µ–Ω—å:**\n"]
    if avg_mood_last > 0: report_lines.append(f"‚Ä¢ –°–µ—Ä–µ–¥–Ω—ñ–π –Ω–∞—Å—Ç—Ä—ñ–π: {'üòä' if avg_mood_last > 2.5 else 'üòê' if avg_mood_last > 1.5 else 'üòû'}")
    if avg_sys_last > 0: report_lines.append(f"‚Ä¢ –°–µ—Ä–µ–¥–Ω—ñ–π —Ç–∏—Å–∫: {int(avg_sys_last)}/{int(avg_dias_last)}")
    
    if prev_week_data:
        _, avg_sys_prev, _ = get_avg_metrics(prev_week_data)
        if avg_sys_last > 0 and avg_sys_prev > 0 and abs(avg_sys_last - avg_sys_prev) > 3:
             trend = "–∑—Ä—ñ—Å" if avg_sys_last > avg_sys_prev else "–∑–Ω–∏–∑–∏–≤—Å—è"
             report_lines.append(f"‚Ä¢ –í–∞—à —Å–µ—Ä–µ–¥–Ω—ñ–π —Å–∏—Å—Ç–æ–ª—ñ—á–Ω–∏–π —Ç–∏—Å–∫ **{trend}** –ø–æ—Ä—ñ–≤–Ω—è–Ω–æ –∑ –ø–æ–∑–∞–º–∏–Ω—É–ª–∏–º —Ç–∏–∂–Ω–µ–º.")
    return "\n".join(report_lines)

def create_pressure_graph(user_id: int, days: int = 30) -> str | None:
    # –ü—Ä–∏–º—ñ—Ç–∫–∞: —Ü—è —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ–ø–µ—Ä –Ω–µ –±—É–¥–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏, –æ—Å–∫—ñ–ª—å–∫–∏ –º–∏ –±—ñ–ª—å—à–µ –Ω–µ –∑–±–∏—Ä–∞—î–º–æ —Ç–∏—Å–∫ —É Check-in
    # –á—ó –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—É–¥–µ –∞–±–æ –≤–∏–¥–∞–ª–∏—Ç–∏, –∞–±–æ –∞–¥–∞–ø—Ç—É–≤–∞—Ç–∏ –¥–ª—è –Ω–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö (–Ω–∞–ø—Ä. –≥—Ä–∞—Ñ—ñ–∫ –Ω–∞—Å—Ç—Ä–æ—é)
    return None

def generate_doctor_report_pdf(user_id: int) -> str:
    profile, history = get_user_profile(user_id), get_user_history(user_id)
    pdf = FPDF()
    pdf.add_page()
    pdf.add_font('DejaVu', '', 'DejaVuSans.ttf', uni=True)
    pdf.set_font('DejaVu', '', 16)
    pdf.cell(0, 10, '–ó–≤—ñ—Ç –ø—Ä–æ —Å—Ç–∞–Ω –∑–¥–æ—Ä–æ–≤\'—è', 0, 1, 'C')
    pdf.set_font('DejaVu', '', 12)
    pdf.cell(0, 10, f'–ü–∞—Ü—ñ—î–Ω—Ç: {profile[0] if profile else "N/A"}', 0, 1, 'C')
    pdf.cell(0, 10, f'–î–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó: {datetime.date.today().strftime("%d-%m-%Y")}', 0, 1, 'C'), pdf.ln(10)

    pdf.set_font('DejaVu', '', 14), pdf.cell(0, 10, '–û—Å—Ç–∞–Ω–Ω—ñ –∑–∞–ø–∏—Å–∏:', 0, 1), pdf.set_font('DejaVu', '', 10)
    for record in history:
        timestamp, mood, sleep, note, activity, stress, water = record
        dt_object = datetime.datetime.strptime(timestamp, '%Y-%m-%d %H:%M:%S.%f')
        line = f"{dt_object.strftime('%d-%m-%y %H:%M')}: "
        if note: line += f"–ù–æ—Ç–∞—Ç–∫–∞ - {note}. "
        if mood: line += f"–ù–∞—Å—Ç—Ä—ñ–π - {mood}. "
        if sleep: line += f"–°–æ–Ω - {sleep}. "
        if activity: line += f"–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å - {activity}. "
        if stress: line += f"–°—Ç—Ä–µ—Å - {stress}. "
        if water: line += f"–í–æ–¥–∞ - {water}. "
        pdf.multi_cell(0, 5, line)
    
    filepath = f"report_{user_id}.pdf"
    pdf.output(filepath)
    return filepath

async def send_weekly_report(bot: Bot, user_id: int):
    logging.info(f"–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–∏–∂–Ω–µ–≤–æ–≥–æ –∑–≤—ñ—Ç—É –¥–ª—è user_id={user_id}")
    if report_text := analyze_weekly_data(get_weekly_health_data(user_id)):
        try: await bot.send_message(user_id, report_text)
        except Exception as e: logging.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–≤—ñ—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}: {e}")

async def send_reminder(bot: Bot, user_id: int, med_id: int, med_name: str, dosage: str):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–π–Ω—è—Ç–æ", callback_data=f"med_log:taken:{med_id}"), InlineKeyboardButton(text="‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ", callback_data=f"med_log:skipped:{med_id}")]])
    try: await bot.send_message(user_id, f"‚è∞ **–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è!**\n\n–ß–∞—Å –ø—Ä–∏–π–Ω—è—Ç–∏ –ª—ñ–∫–∏: **{med_name}**\n–î–æ–∑—É–≤–∞–Ω–Ω—è: {dosage}", reply_markup=keyboard)
    except Exception as e: logging.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è user_id={user_id}: {e}")

def schedule_reminders(bot: Bot):
    schedule.clear()
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT user_id, med_id, med_name, dosage, schedule FROM medications WHERE is_active = 1")
    for user_id, med_id, med_name, dosage, schedule_str in cursor.fetchall():
        for t in re.findall(r"(\d{2}:\d{2})", schedule_str):
            schedule.every().day.at(t).do(lambda u=user_id, m_id=med_id, m_n=med_name, d=dosage: asyncio.create_task(send_reminder(bot, u, m_id, m_n, d)))
    
    cursor.execute("SELECT DISTINCT user_id FROM health_entries")
    for user in cursor.fetchall():
        schedule.every().sunday.at("10:00").do(lambda u_id=user[0]: asyncio.create_task(send_weekly_report(bot, u_id)))
    conn.close()

async def scheduler_loop(bot: Bot):
    schedule_reminders(bot)
    while True:
        schedule.run_pending()
        await asyncio.sleep(60)

async def on_startup(bot: Bot):
    setup_database()
    asyncio.create_task(scheduler_loop(bot))
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ, –±–∞–∑—É –¥–∞–Ω–∏—Ö –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ, –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ.")


# --- –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ —Ç–∞ –•–µ–Ω–¥–ª–µ—Ä–∏ ---
def get_main_menu_keyboard(user_id: int):
    profile, is_female = get_user_profile(user_id), False
    if profile and profile[2] and profile[2].lower() in ['–∂—ñ–Ω–æ—á–∞', 'female']: is_female = True
    
    keyboard = [
        [KeyboardButton(text=ANALYZE_BTN_TEXT)], # <-- –ó–º—ñ–Ω–µ–Ω–æ —Ç—É—Ç
        [KeyboardButton(text="‚òÄÔ∏è –©–æ–¥–µ–Ω–Ω–∏–π Check-in"), KeyboardButton(text="üìù –®–≤–∏–¥–∫–∏–π –∑–∞–ø–∏—Å")],
        [KeyboardButton(text="üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å"), KeyboardButton(text="üíä –ú–æ—ó –ª—ñ–∫–∏")],
        [KeyboardButton(text="üìñ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é"), KeyboardButton(text="üìÑ –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–≤—ñ—Ç")]
    ]
    if is_female: keyboard.insert(2, [KeyboardButton(text="üå∏ –ñ—ñ–Ω–æ—á–µ –∑–¥–æ—Ä–æ–≤'—è")])
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

cancel_keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]], resize_keyboard=True)

@router.message(F.text == "‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
async def back_to_main_menu(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.", reply_markup=get_main_menu_keyboard(message.from_user.id))

# ... (–≤—Å—ñ —ñ–Ω—à—ñ —Ö–µ–Ω–¥–ª–µ—Ä–∏ –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è —Ç—É—Ç, –∞–ª–µ Check-in –ø–æ–≤–Ω—ñ—Å—Ç—é –∑–∞–º—ñ–Ω–µ–Ω–æ) ...
@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–π–º–∞—é —É–º–æ–≤–∏", callback_data="accept_privacy"), InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", callback_data="skip_privacy")]])
    await message.answer(f"üëã **–í—ñ—Ç–∞—é!**\n\n–ü–µ—Ä–µ–¥ –ø–æ—á–∞—Ç–∫–æ–º —Ä–æ–±–æ—Ç–∏, –±—É–¥—å –ª–∞—Å–∫–∞, –æ–∑–Ω–∞–π–æ–º—Ç–µ—Å—è –∑ –ø–æ–ª—ñ—Ç–∏–∫–æ—é –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–æ—Å—Ç—ñ.\n‚û°Ô∏è **–ü—Ä–æ—á–∏—Ç–∞—Ç–∏:** {PRIVACY_POLICY_URL}", reply_markup=keyboard, disable_web_page_preview=True)

@router.callback_query(F.data.in_({"accept_privacy", "skip_privacy"}))
async def process_privacy_choice(callback: CallbackQuery, state: FSMContext):
    create_or_update_user(callback.from_user.id, callback.from_user.first_name)
    confirmation_text = "–î—è–∫—É—î–º–æ –∑–∞ –∑–≥–æ–¥—É!" if callback.data == "accept_privacy" else "–í–∏ –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—è –∑ –ø–æ–ª—ñ—Ç–∏–∫–æ—é –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–æ—Å—Ç—ñ –∫–æ–º–∞–Ω–¥–æ—é /privacy."
    await callback.message.edit_text(confirmation_text)
    await callback.message.answer("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=get_main_menu_keyboard(callback.from_user.id))

@router.message(Command("sos"))
async def cmd_sos(message: Message):
    profile_data = get_user_profile(message.from_user.id)
    if not profile_data: return await message.answer("–ü—Ä–æ—Ñ—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ó–∞–ø–æ–≤–Ω—ñ—Ç—å –π–æ–≥–æ —á–µ—Ä–µ–∑ –º–µ–Ω—é.")
    _, _, _, _, _, blood, allergies, chronic, contact = profile_data
    sos_text = (f"**üöë –í–∞—à–∞ –ï–∫—Å—Ç—Ä–µ–Ω–∞ –∫–∞—Ä—Ç–∫–∞:**\n\n"
                f"**–ì—Ä—É–ø–∞ –∫—Ä–æ–≤—ñ:** {blood or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
                f"**–ê–ª–µ—Ä–≥—ñ—ó:** {allergies or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
                f"**–•—Ä–æ–Ω—ñ—á–Ω—ñ –∑–∞—Ö–≤–æ—Ä—é–≤–∞–Ω–Ω—è:** {chronic or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
                f"**–ï–∫—Å—Ç—Ä–µ–Ω–∏–π –∫–æ–Ω—Ç–∞–∫—Ç:** {contact or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}")
    await message.answer(sos_text)

# --- –ù–û–í–ò–ô CHECK-IN ---
@router.message(F.text == "‚òÄÔ∏è –©–æ–¥–µ–Ω–Ω–∏–π Check-in")
async def start_checkin(message: Message, state: FSMContext):
    await state.set_state(Form.checkin_mood)
    keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="üòä –ß—É–¥–æ–≤–∏–π"), KeyboardButton(text="üòê –ù–æ—Ä–º–∞–ª—å–Ω–∏–π"), KeyboardButton(text="üòû –ü–æ–≥–∞–Ω–∏–π")], [KeyboardButton(text="‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]], resize_keyboard=True)
    await message.answer("–Ø–∫ –≤–∞—à –Ω–∞—Å—Ç—Ä—ñ–π —Å—å–æ–≥–æ–¥–Ω—ñ?", reply_markup=keyboard)

@router.message(Form.checkin_mood)
async def process_checkin_mood(message: Message, state: FSMContext):
    await state.update_data(mood=message.text)
    await state.set_state(Form.checkin_sleep)
    await message.answer("–Ø–∫ –≤–∏ —Å–ø–∞–ª–∏? (–Ω–∞–ø—Ä., '8 –≥–æ–¥–∏–Ω, –¥–æ–±—Ä–µ' –∞–±–æ '–ø–æ–≥–∞–Ω–æ')", reply_markup=cancel_keyboard)

@router.message(Form.checkin_sleep)
async def process_checkin_sleep(message: Message, state: FSMContext):
    await state.update_data(sleep_quality=message.text)
    await state.set_state(Form.checkin_activity)
    keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–ù–∏–∑—å–∫–∞"), KeyboardButton(text="–°–µ—Ä–µ–¥–Ω—è"), KeyboardButton(text="–í–∏—Å–æ–∫–∞")], [KeyboardButton(text="‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]], resize_keyboard=True)
    await message.answer("–Ø–∫–∏–º –±—É–≤ –≤–∞—à —Ä—ñ–≤–µ–Ω—å —Ñ—ñ–∑–∏—á–Ω–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —Å—å–æ–≥–æ–¥–Ω—ñ?", reply_markup=keyboard)

@router.message(Form.checkin_activity)
async def process_checkin_activity(message: Message, state: FSMContext):
    await state.update_data(activity_level=message.text)
    await state.set_state(Form.checkin_stress)
    keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–ù–∏–∑—å–∫–∏–π"), KeyboardButton(text="–°–µ—Ä–µ–¥–Ω—ñ–π"), KeyboardButton(text="–í–∏—Å–æ–∫–∏–π")], [KeyboardButton(text="‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]], resize_keyboard=True)
    await message.answer("–û—Ü—ñ–Ω—ñ—Ç—å –≤–∞—à —Å–µ—Ä–µ–¥–Ω—ñ–π —Ä—ñ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—É –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ:", reply_markup=keyboard)

@router.message(Form.checkin_stress)
async def process_checkin_stress(message: Message, state: FSMContext):
    await state.update_data(stress_level=message.text)
    await state.set_state(Form.checkin_water)
    keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–ú–µ–Ω—à–µ 1 –ª—ñ—Ç—Ä–∞"), KeyboardButton(text="1-2 –ª—ñ—Ç—Ä–∏"), KeyboardButton(text="–ë—ñ–ª—å—à–µ 2 –ª—ñ—Ç—Ä—ñ–≤")], [KeyboardButton(text="‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]], resize_keyboard=True)
    await message.answer("–°–∫—ñ–ª—å–∫–∏ –≤–æ–¥–∏ –≤–∏ –≤–∏–ø–∏–ª–∏ —Å—å–æ–≥–æ–¥–Ω—ñ?", reply_markup=keyboard)

@router.message(Form.checkin_water)
async def process_checkin_water(message: Message, state: FSMContext):
    await state.update_data(water_intake=message.text)
    data = await state.get_data()
    save_health_entry(user_id=message.from_user.id, **data)
    
    recommendation = generate_daily_recommendation(data)
    await message.answer(recommendation, reply_markup=get_main_menu_keyboard(message.from_user.id))
    
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT checkin_streak, last_checkin_date FROM users WHERE user_id = ?", (message.from_user.id,))
    streak_data = cursor.fetchone()
    current_streak, last_date_str = (streak_data[0] or 0, streak_data[1]) if streak_data else (0, None)
    today, new_streak = datetime.date.today(), current_streak
    
    if last_date_str:
        last_date = datetime.datetime.strptime(last_date_str, '%Y-%m-%d').date()
        delta = today - last_date
        if delta.days == 1: new_streak += 1
        elif delta.days > 1: new_streak = 1
    else: new_streak = 1
    cursor.execute("UPDATE users SET checkin_streak = ?, last_checkin_date = ? WHERE user_id = ?", (new_streak, today.strftime('%Y-%m-%d'), message.from_user.id))
    conn.commit(), conn.close()
    
    await state.clear()
    
    if new_streak > 1: await message.answer(f"üî• –í–∏ –≤–µ–¥–µ—Ç–µ —â–æ–¥–µ–Ω–Ω–∏–∫ –≤–∂–µ **{new_streak}** –¥–Ω—ñ–≤ –ø–æ—Å–ø—ñ–ª—å!")
    if new_streak >= 5: await award_achievement(message.from_user.id, 'STREAK_5_DAYS', message)

# ... (—Ä–µ—à—Ç–∞ —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤, —â–æ –∑–∞–ª–∏—à–∏–ª–∏—Å—å, –∫–æ–ø—ñ—é—é—Ç—å—Å—è —Å—é–¥–∏)
# med_bot_aiogram.py

@router.message(F.text == "üìñ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é")
async def view_history(message: Message):
    if not (history := get_user_history(message.from_user.id)): return await message.answer("–í–∞—à–∞ —ñ—Å—Ç–æ—Ä—ñ—è –∑–∞–ø–∏—Å—ñ–≤ –ø–æ—Ä–æ–∂–Ω—è.")
    response = "**–û—Å—Ç–∞–Ω–Ω—ñ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ –∑–¥–æ—Ä–æ–≤'—è:**\n\n"
    for record in history:
        timestamp, mood, sleep, note, activity, stress, water = record
        # ‚Üì‚Üì‚Üì –í–ò–ü–†–ê–í–õ–ï–ù–û –¢–£–¢ (–ø—Ä–∏–±—Ä–∞–ª–∏ .%f) ‚Üì‚Üì‚Üì
        dt_object = datetime.datetime.strptime(timestamp, '%Y-%m-%d %H:%M:%S')
        response += f"üóìÔ∏è **{dt_object.strftime('%d-%m-%y %H:%M')}**\n"
        if note: response += f"   - üìù –ù–æ—Ç–∞—Ç–∫–∞: {note}\n"
        if mood: response += f"   - –ù–∞—Å—Ç—Ä—ñ–π: {mood}\n"
        if sleep: response += f"   - –°–æ–Ω: {sleep}\n"
        if activity: response += f"   - –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: {activity}\n"
        if stress: response += f"   - –°—Ç—Ä–µ—Å: {stress}\n"
        if water: response += f"   - –í–æ–¥–∞: {water}\n"
        response += "---\n"
    await message.answer(response)

@router.message(F.text == "üìù –®–≤–∏–¥–∫–∏–π –∑–∞–ø–∏—Å")
async def ask_for_note(message: Message, state: FSMContext):
    await state.set_state(Form.waiting_for_note)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –Ω–æ—Ç–∞—Ç–∫—É. –í–æ–Ω–∞ –±—É–¥–µ –∑–±–µ—Ä–µ–∂–µ–Ω–∞ –∑ –ø–æ—Ç–æ—á–Ω–æ—é –¥–∞—Ç–æ—é —ñ —á–∞—Å–æ–º.", reply_markup=cancel_keyboard)
    
    

@router.message(Form.waiting_for_note)
async def process_note(message: Message, state: FSMContext):
    save_health_entry(user_id=message.from_user.id, note=message.text)
    await state.clear()
    await message.answer("‚úÖ –ù–æ—Ç–∞—Ç–∫—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ.", reply_markup=get_main_menu_keyboard(message.from_user.id))
    await award_achievement(message.from_user.id, 'FIRST_NOTE', message)
    
# ... –ø—ñ—Å–ª—è —Ö–µ–Ω–¥–ª–µ—Ä–∞ process_note ...

@router.message(F.text == ANALYZE_BTN_TEXT)
async def start_symptom_checker(message: Message, state: FSMContext):
    await state.set_state(Form.symptom_checker_start)
    await message.answer(
        "–û–±–µ—Ä—ñ—Ç—å –æ—Å–Ω–æ–≤–Ω–∏–π —Å–∏–º–ø—Ç–æ–º –∞–±–æ –æ–ø–∏—à—ñ—Ç—å –π–æ–≥–æ:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="ü§Ø –ì–æ–ª–æ–≤–Ω–∏–π –±—ñ–ª—å", callback_data="symptom:headache")],
            [InlineKeyboardButton(text="ü§í –ë—ñ–ª—å —É –≥–æ—Ä–ª—ñ", callback_data="symptom:sore_throat")],
            [InlineKeyboardButton(text="üìù –Ü–Ω—à–µ (–æ–ø–∏—Å–∞—Ç–∏ —Ç–µ–∫—Å—Ç–æ–º)", callback_data="symptom:other")]
        ])
    )

# !!! –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –û–ë–†–û–ë–ù–ò–ö - –í–°–¢–ê–í–¢–ï –í –°–ê–ú–ò–ô –ö–Ü–ù–ï–¶–¨ –§–ê–ô–õ–£ !!!
@router.message()
async def catch_all_unhandled_messages(message: Message, state: FSMContext):
    """
    –¶–µ–π —Ö–µ–Ω–¥–ª–µ—Ä –ª–æ–≤–∏—Ç—å –í–°–Ü —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫—ñ –Ω–µ –±—É–ª–∏ –æ–±—Ä–æ–±–ª–µ–Ω—ñ
    —ñ–Ω—à–∏–º–∏ —Ö–µ–Ω–¥–ª–µ—Ä–∞–º–∏, —ñ –ø–æ–∫–∞–∑—É—î –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –±–æ—Ç–∞.
    """
    current_state = await state.get_state()
    await message.answer(
        f"<b>–î—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:</b>\n\n"
        f"–û—Ç—Ä–∏–º–∞–Ω–æ —Ç–µ–∫—Å—Ç: ¬´<code>{message.text}</code>¬ª\n"
        f"–ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –±–æ—Ç–∞: <b>{current_state}</b>"
    )
    
